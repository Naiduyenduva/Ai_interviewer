// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CANDIDATE
}

model User {
  UserId            String      @id @default(uuid())
  name              String
  email             String      @unique
  password          String
  role              Role
  interviewsCreated Interview[] @relation("AdminInterviews")
  responses         Response[]
  questionsCreated  Question[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Question {
  QuestionId  String              @id @default(uuid())
  text        String
  type        QuestionType        @default(TEXT)
  options     String[] // Only for MCQs
  createdBy   User                @relation(fields: [createdById], references: [UserId])
  createdById String
  interviews  InterviewQuestion[]
  answers     Answer[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

enum QuestionType {
  TEXT
  MCQ
}

model Interview {
  InterviewId String              @id @default(uuid())
  title       String
  createdBy   User                @relation("AdminInterviews", fields: [createdById], references: [UserId])
  createdById String
  questions   InterviewQuestion[]
  responses   Response[]
  link        String              @unique
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model InterviewQuestion {
  InterviewQId String    @id @default(uuid())
  interview    Interview @relation(fields: [interviewId], references: [InterviewId])
  interviewId  String
  question     Question  @relation(fields: [questionId], references: [QuestionId])
  questionId   String
  order        Int // Optional: for ordering questions in the interview
}

model Response {
  ResponseId  String    @id @default(uuid())
  interview   Interview @relation(fields: [interviewId], references: [InterviewId])
  interviewId String
  user        User      @relation(fields: [userId], references: [UserId])
  userId      String
  answers     Answer[]
  createdAt   DateTime  @default(now())
}

model Answer {
  AnswerId   String   @id @default(uuid())
  question   Question @relation(fields: [questionId], references: [QuestionId])
  questionId String
  response   Response @relation(fields: [responseId], references: [ResponseId])
  responseId String
  answerText String
}
